package com.daniel.cjavapaciente.controller;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.core.env.Environment;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.daniel.cjavapaciente.model.Paciente;
import com.daniel.cjavapaciente.repository.PacienteRepository;

@RestController
@CrossOrigin(origins = "*")
public class PacienteController {
	
	@Autowired
	PacienteRepository paacienteRepository;
	 
	@Value("${server.port}")
	private Integer port;
	@Value("${eureka.instance.instance-id}")
	private String instanceId;
	
	@GetMapping("/pacientes")
	public List<Paciente> getPacientes()
	{
		return paacienteRepository.findAll().stream().map(paciente->{
			paciente.setPort(port);
			return paciente;
		}).collect(Collectors.toList());
		 
	}

	@GetMapping("/paciente/{codigo}")
	public Optional<Paciente> getPaciente(@PathVariable Integer codigo)
	{
		Optional<Paciente> paciente = paacienteRepository.findById(codigo);
		paciente.get().setPort(port);
		paciente.get().setInstanciaId(instanceId);
		return paciente;
	}

	@PutMapping("/paciente/{codigo}")
	public Optional<Paciente> updateEmployee(@RequestBody Paciente newPaciente, @PathVariable Integer codigo)
	{
		Optional<Paciente> optionalPaciente = paacienteRepository.findById(codigo);
		if (optionalPaciente.isPresent()) {
			Paciente paciente = optionalPaciente.get();
			paciente.setNombres(newPaciente.getNombres());
			paciente.setApellidos(newPaciente.getApellidos());
			paciente.setDni(newPaciente.getDni());
			paciente.setTelefono(newPaciente.getTelefono());
			paacienteRepository.save(paciente);
		}
		return optionalPaciente;
	}

	 

	@PostMapping("/paciente")
	public Paciente addEmployee(@RequestBody Paciente newPaciente)
	{
		Paciente prod = new Paciente(newPaciente.getIdPaciente(),newPaciente.getNombres(), newPaciente.getApellidos(), newPaciente.getDireccion(), newPaciente.getDni(),newPaciente.getTelefono(),instanceId);
		paacienteRepository.save(prod);
		return prod;
	}
}
